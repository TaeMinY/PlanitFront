{"version":3,"sources":["../../../src/directives/intersect/index.ts"],"names":[],"mappings":";;;;;;;;;AAMA,SAAS,QAAT,CAAmB,EAAnB,EAAoC,OAApC,EAAkE;AAChE,MAAM,SAAS,GAAG,OAAO,CAAC,SAAR;AAAqB;AAA2B,IAAlE;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,KAAtB;AACA,MAAM,QAAQ,GAAG,QAAO,KAAP,MAAiB,QAAlC;AACA,MAAM,QAAQ,GAAG,QAAQ,GAAG,KAAK,CAAC,OAAT,GAAmB,KAA5C;AACA,MAAM,QAAQ,GAAG,IAAI,oBAAJ,CAAyB,YAGtC;AAAA,QAFF,OAEE,uEAFqC,EAErC;AAAA,QADF,QACE;;AACF;AACA,QAAI,CAAC,EAAE,CAAC,QAAR,EAAkB,OAFhB,CAEuB;AAEzB;AACA;;AACA,QACE,QAAQ,KACN,CAAC,SAAS,CAAC,KAAX,IACA,EAAE,CAAC,QAAH,CAAY,IAFN,CADV,EAKE;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,IAAR,CAAa,UAAA,KAAK;AAAA,eAAI,KAAK,CAAC,cAAV;AAAA,OAAlB,CAAD,CAA9B;AAEA,MAAA,QAAQ,CAAC,OAAD,EAAU,QAAV,EAAoB,cAApB,CAAR;AACD,KAfC,CAiBF;AACA;;;AACA,QAAI,EAAE,CAAC,QAAH,CAAY,IAAZ,IAAoB,SAAS,CAAC,IAAlC,EAAwC,MAAM,CAAC,EAAD,CAAN,CAAxC,CACA;AADA,SAEM,EAAE,CAAC,QAAH,CAAY,IAAZ,GAAmB,IAApB;AACN,GAzBgB,EAyBd,KAAK,CAAC,OAAN,IAAiB,EAzBH,CAAjB;AA2BA,EAAA,EAAE,CAAC,QAAH,GAAc;AAAE,IAAA,IAAI,EAAE,KAAR;AAAe,IAAA,QAAQ,EAAR;AAAf,GAAd;AAEA,EAAA,QAAQ,CAAC,OAAT,CAAiB,EAAjB;AACD;;AAED,SAAS,MAAT,CAAiB,EAAjB,EAAgC;AAC9B;AACA,MAAI,CAAC,EAAE,CAAC,QAAR,EAAkB;;AAElB,EAAA,EAAE,CAAC,QAAH,CAAY,QAAZ,CAAqB,SAArB,CAA+B,EAA/B;;AACA,SAAO,EAAE,CAAC,QAAV;AACD;;AAEM,IAAM,SAAS,GAAG;AACvB,EAAA,QAAQ,EAAR,QADuB;AAEvB,EAAA,MAAM,EAAN;AAFuB,CAAlB;;eAKQ,S","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\n\ninterface ObserveVNodeDirective extends VNodeDirective {\n  options?: IntersectionObserverInit\n}\n\nfunction inserted (el: HTMLElement, binding: ObserveVNodeDirective) {\n  const modifiers = binding.modifiers || /* istanbul ignore next */ {}\n  const value = binding.value\n  const isObject = typeof value === 'object'\n  const callback = isObject ? value.handler : value\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    /* istanbul ignore if */\n    if (!el._observe) return // Just in case, should never fire\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      callback && (\n        !modifiers.quiet ||\n        el._observe.init\n      )\n    ) {\n      const isIntersecting = Boolean(entries.find(entry => entry.isIntersecting))\n\n      callback(entries, observer, isIntersecting)\n    }\n\n    // If has already been initted and\n    // has the once modifier, unbind\n    if (el._observe.init && modifiers.once) unbind(el)\n    // Otherwise, mark the observer as initted\n    else (el._observe.init = true)\n  }, value.options || {})\n\n  el._observe = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unbind (el: HTMLElement) {\n  /* istanbul ignore if */\n  if (!el._observe) return\n\n  el._observe.observer.unobserve(el)\n  delete el._observe\n}\n\nexport const Intersect = {\n  inserted,\n  unbind,\n}\n\nexport default Intersect\n"],"sourceRoot":"","file":"index.js"}